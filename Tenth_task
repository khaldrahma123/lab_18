#include <stdio.h>
#include "tasks/string_.h"
#define ASSERT_STRING(expected, got) assertString(expected, got, __FILE__, 
__FUNCTION__, __LINE__)
// функция для определения пробельных символов
int isSpace(char ch) {
 return (ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r');
}
void reverseRange(char *begin, char *end) {
 // Переворачиваем слово, заданное диапазоном [begin, end)
21
 while (begin < end) {
 char temp = *begin;
 *begin = *end;
 *end = temp;
 begin++;
 end--;
 }
}
void reverseWordsInPlace(char *sentence) {
 char *current = sentence;
 char *wordBegin = NULL;
 // Перебираем строку посимвольно
 while (*current != '\0') {
 // Если текущий символ - буква, это начало нового слова
 if (!isSpace(*current)) {
 if (wordBegin == NULL) {
 wordBegin = current;
 }
 } else {
 // Если текущий символ - пробел или знак пунктуации и мы
находимся внутри слова
 if (wordBegin != NULL) {
 reverseRange(wordBegin, current - 1); // Переворачиваем слово
 wordBegin = NULL; // Сбрасываем указатель начала слова
 }
 }
 current++;
 }
 // Последнее слово в строке нужно перевернуть от wordBegin до конца
строки
 if (wordBegin != NULL) {
 reverseRange(wordBegin, current - 1);
 }
 // Теперь нужно перевернуть всю строку, чтобы слова были в правильном
порядке
 reverseRange(sentence, current - 1);
}
// Функция для вывода сообщения об ошибке или успешном выполнении теста
void assertString(const char *expected, char *got, const char *fileName, 
const char *funcName, int line) {
 if (my_strcmp(expected, got)) {
 fprintf(stderr, "File %s\n", fileName);
 fprintf(stderr, "%s - failed on line %d\n", funcName, line);
 fprintf(stderr, "Expected: \"%s\"\n", expected);
 fprintf(stderr, "Got: \"%s\"\n\n", got);
 } else {
 fprintf(stderr, "%s - OK\n", funcName);
 }
}
// Тестовая функция для проверки работы функции reverseWordsInPlace
void testReverseWordsInPlace() {
 // Тест на пустую строку
 char s1[] = "";
 reverseWordsInPlace(s1);
 ASSERT_STRING("", s1);
 // Тест на строку с одним словом
22
 char s2[] = "Hello";
 reverseWordsInPlace(s2);
 ASSERT_STRING("Hello", s2);
 // Тест на строку с несколькими словами и знаками препинания
 char s3[] = "Hello world! Good morning.";
 reverseWordsInPlace(s3);
 ASSERT_STRING("morning. Good world! Hello", s3);
 // Добавьте другие тесты здесь
 // Тест на строку с особыми случаями (например, много пробелов, знаков
препинания и т. д.)
 char s4[] = " How are you? ";
 reverseWordsInPlace(s4);
 ASSERT_STRING(" you? are How ", s4);
}
int main() {
 // Запуск теста
 testReverseWordsInPlace();
 return 0;
}
Eleventh_task
#include <stdio.h>
#include <assert.h>
#include "tasks/string_.h"
typedef enum {
 FIRST_WORD_WITH_A,
 NOT_FOUND_A_WORD_WITH_A,
 WORD_FOUND,
 EMPTY_STRING
} WordBeforeFirstWordWithAReturnCode;
WordBeforeFirstWordWithAReturnCode getWordBeforeFirstWordWithA(char *s, char 
*word) {
 if (string_length(s) == 0) {
 printf("Empty string\n");
 return EMPTY_STRING;
 }
 char *start = s;
 char *end = s;
 char *prevWordStart = NULL;
 char *prevWordEnd = NULL;
 int foundWordWithA = 0;
 while (*end != '\0') {
 // Отладочный вывод
 printf("start: %s, end: %s, prevWordStart: %s, prevWordEnd: %s\n", 
start, end, prevWordStart, prevWordEnd);
 start = findNonSpace(start);
 end = findSpace(start);
 // Проверяем, нашли ли мы слово
 if (start == end)
 break;
 // Проверяем, содержит ли это слово 'a' (с учетом регистра)
 char *aFound = find(start, end, 'a');
 if (aFound != NULL && (prevWordStart == NULL || aFound < 
23
prevWordStart)) {
 // Нашли слово с буквой 'a', которое является первым в строке
 prevWordStart = start;
 prevWordEnd = end;
 foundWordWithA = 1;
 }
 // Переходим к следующему слову
 start = findSpace(end);
 end = start;
 }
 if (foundWordWithA) {
 if (prevWordStart != NULL) {
 // Копируем предыдущее слово в массив 'word'
 copy(prevWordStart, prevWordEnd, word);
 word[prevWordEnd - prevWordStart] = '\0';
 printf("Word extracted: %s\n", word);
 return WORD_FOUND;
 } else {
 printf("No word before the first word with 'a'\n");
 return FIRST_WORD_WITH_A;
 }
 }
 printf("No word with 'a' found in the string\n");
 return NOT_FOUND_A_WORD_WITH_A;
}
void test_getWordBeforeFirstWordWithA() {
 char word[MAX_STRING_SIZE + 1];
 char s1[] = "";
 WordBeforeFirstWordWithAReturnCode result_s1 = 
getWordBeforeFirstWordWithA(s1, word);
 printf("Result for s1: %d\n", result_s1);
 assert(result_s1 == EMPTY_STRING);
 char s3[] = "BC A";
 WordBeforeFirstWordWithAReturnCode result_s3 = 
getWordBeforeFirstWordWithA(s3, word);
 printf("Result for s3: %d\n", result_s3);
 assert(result_s3 == WORD_FOUND);
 assert(my_strcmp(word, "BC") == 0);
}
int main() {
 test_getWordBeforeFirstWordWithA();
  return 0;
}